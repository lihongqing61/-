
	RestTemplate是什么
	RestTemplate提供了多种便捷访问远程Http服务的方法
	是一种简单便捷的访问restful服务模板类 是Spring提供的用于访问Rest服务的客户端模板工具类

	RestTemplate使用
	使用RestTemplate访问restful接口简单粗暴
	(url, requestMap, ResponseBean.class) 
	请求地址, 请求参数, Http响应转换成的对象类型
	
1.	新建microservicecloud-consumer-dept-80

2.	pom.yml
	<?xml version="1.0" encoding="UTF-8"?>
	<project xmlns="http://maven.apache.org/POM/4.0.0"
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		<parent>
			<artifactId>microservicecloud</artifactId>
			<groupId>com.atguigu.springcloud</groupId>
			<version>1.0-SNAPSHOT</version>
		</parent>
		<modelVersion>4.0.0</modelVersion>

		<artifactId>microservicecloud-consumer-dept-80</artifactId>

		<dependencies>
			<dependency><!-- 自己定义的api -->
				<groupId>com.atguigu.springcloud</groupId>
				<artifactId>microservicecloud-api</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
			</dependency>
			<!-- 修改后立即生效，热部署 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>springloaded</artifactId>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-devtools</artifactId>
			</dependency>
		</dependencies>

	</project>
	
3.	application.yml
	server:
		port: 80
		
4.	com.atguigu.springcloud.cfgbeans包下ConfigBean的编写（类似spring里面的applicationContext.xml写入的注入Bean）

	package com.atguigu.springcloud.cfgbeans;

	import org.springframework.context.annotation.Bean;
	import org.springframework.context.annotation.Configuration;
	import org.springframework.web.client.RestTemplate;

	@Configuration
	public class ConfigBean {

		/**
		 * RestTemplate提供了多种便捷访问远程Http服务的方法， 
		 * 是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集
		 * @return
		 */
		@Bean
	   // @LoadBalanced		此处切记不需要
		public RestTemplate restTemplate() {
			return new RestTemplate();
		}

	}

	
5.	com.atguigu.springcloud.controller包下新建DeptController_Consumer部门微服务消费者REST
	package com.atguigu.springcloud.controller;

	import com.atguigu.springcloud.entities.Dept;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.PathVariable;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RestController;
	import org.springframework.web.client.RestTemplate;
	import java.util.List;


	@RestController
	public class DeptController_Consumer {

		private static final String REST_URL_PREFIX = "http://localhost:8001";

		@Autowired
		private RestTemplate restTemplate;

		@RequestMapping(value = "/consumer/dept/add")
		public boolean add() {
			Dept dept = new Dept();
			dept.setDname("运营部");
			return restTemplate.postForObject(REST_URL_PREFIX + "/dept/add", dept, Boolean.class);
		}

		@GetMapping(value = "/consumer/dept/get/{id}")
		public Dept get(@PathVariable("id") Long id)
		{
			return restTemplate.getForObject(REST_URL_PREFIX + "/dept/get/"+id, Dept.class);
		}

		@SuppressWarnings("unchecked")
		@GetMapping(value = "/consumer/dept/list")
		public List<Dept> list()
		{
			return restTemplate.getForObject(REST_URL_PREFIX +"/dept/list", List.class);
		}

		// 测试@EnableDiscoveryClient,消费端可以调用服务发现
		@GetMapping(value = "/consumer/dept/discovery")
		public Object discovery()
		{
			return restTemplate.getForObject(REST_URL_PREFIX + "/dept/discovery", Object.class);
		}
	}

6.	DeptConsumer80_App主启动类
	package com.atguigu.springcloud;

	import org.springframework.boot.SpringApplication;
	import org.springframework.boot.autoconfigure.SpringBootApplication;

	@SpringBootApplication
	public class DeptConsumer80_App {

		public static void main(String[] args) {
			SpringApplication.run(DeptConsumer80_App.class, args);
		}
	}

7.	测试
	http://localhost/consumer/dept/get/2
	http://localhost/consumer/dept/list








































		
	